{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nimport { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\n\nconst useForm = () => {\n  const {\n    0: values,\n    1: setValues\n  } = useState({\n    location: {\n      lat: null,\n      lng: null\n    },\n    distance: 10,\n    results: 25\n  });\n  const {\n    0: address,\n    1: setAddress\n  } = useState(\"\");\n  const {\n    0: loc,\n    1: setLoc\n  } = useState(\"\");\n\n  function handleLocation(e) {\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      location: e\n    }));\n  }\n\n  function handleAddressChange(e) {\n    setAddress(e);\n  }\n\n  function handleLocationSelect(e) {\n    geocodeByAddress(e).then(async results => {\n      const newAddress = results[0].formatted_address.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").split(\" \").slice(0, 2).join(\" \");\n      await handleAddressChange(newAddress);\n      return getLatLng(results[0]);\n    }).then(async latLng => {\n      const newValues = _objectSpread(_objectSpread({}, values), {}, {\n        location: latLng\n      });\n\n      await setValues(newValues);\n    }).catch(error => console.error('Error', error));\n  }\n\n  function handleSelect(e) {\n    // dropdown\n    const {\n      name,\n      value\n    } = e.target;\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      [name]: parseInt(value)\n    }));\n  }\n\n  return {\n    values,\n    address,\n    handleAddressChange,\n    handleLocationSelect,\n    handleSelect,\n    handleLocation\n  };\n};\n\nexport default useForm;","map":{"version":3,"sources":["/home/kesari/Documents/sukhothaiinreactbootstrap/pages/home/useForm.js"],"names":["useState","geocodeByAddress","getLatLng","useForm","values","setValues","location","lat","lng","distance","results","address","setAddress","loc","setLoc","handleLocation","e","handleAddressChange","handleLocationSelect","then","newAddress","formatted_address","replace","split","slice","join","latLng","newValues","catch","error","console","handleSelect","name","value","target","parseInt"],"mappings":";;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,gBAAT,EAA2BC,SAA3B,QAA4C,2BAA5C;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAElB,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBL,QAAQ,CAAC;AACjCM,IAAAA,QAAQ,EAAE;AAACC,MAAAA,GAAG,EAAE,IAAN;AAAYC,MAAAA,GAAG,EAAE;AAAjB,KADuB;AAEjCC,IAAAA,QAAQ,EAAE,EAFuB;AAGjCC,IAAAA,OAAO,EAAE;AAHwB,GAAD,CAApC;AAMA,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBZ,QAAQ,CAAC,EAAD,CAAtC;AAEA,QAAM;AAAA,OAACa,GAAD;AAAA,OAAMC;AAAN,MAAgBd,QAAQ,CAAC,EAAD,CAA9B;;AAEA,WAASe,cAAT,CAAwBC,CAAxB,EAA0B;AACtBX,IAAAA,SAAS,iCAAKD,MAAL;AAAaE,MAAAA,QAAQ,EAAEU;AAAvB,OAAT;AACH;;AAED,WAASC,mBAAT,CAA6BD,CAA7B,EAA+B;AAC3BJ,IAAAA,UAAU,CAACI,CAAD,CAAV;AACH;;AAED,WAASE,oBAAT,CAA8BF,CAA9B,EAAgC;AAC5Bf,IAAAA,gBAAgB,CAACe,CAAD,CAAhB,CACKG,IADL,CACU,MAAMT,OAAN,IAAiB;AACnB,YAAMU,UAAU,GAAGV,OAAO,CAAC,CAAD,CAAP,CAAWW,iBAAX,CACZC,OADY,CACJ,8BADI,EAC2B,EAD3B,EAEZC,KAFY,CAEN,GAFM,EAGZC,KAHY,CAGN,CAHM,EAGH,CAHG,EAIZC,IAJY,CAIP,GAJO,CAAnB;AAKA,YAAMR,mBAAmB,CAACG,UAAD,CAAzB;AACA,aAAOlB,SAAS,CAACQ,OAAO,CAAC,CAAD,CAAR,CAAhB;AACH,KATL,EAUKS,IAVL,CAUU,MAAMO,MAAN,IAAgB;AAClB,YAAMC,SAAS,mCACRvB,MADQ;AAEXE,QAAAA,QAAQ,EAAEoB;AAFC,QAAf;;AAIA,YAAMrB,SAAS,CAACsB,SAAD,CAAf;AACH,KAhBL,EAiBKC,KAjBL,CAiBWC,KAAK,IAAIC,OAAO,CAACD,KAAR,CAAc,OAAd,EAAuBA,KAAvB,CAjBpB;AAkBH;;AAED,WAASE,YAAT,CAAsBf,CAAtB,EAAwB;AAAE;AACtB,UAAM;AAAEgB,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBjB,CAAC,CAACkB,MAA1B;AACA7B,IAAAA,SAAS,iCAAKD,MAAL;AAAa,OAAC4B,IAAD,GAAQG,QAAQ,CAACF,KAAD;AAA7B,OAAT;AACH;;AAED,SAAO;AACH7B,IAAAA,MADG;AAEHO,IAAAA,OAFG;AAGHM,IAAAA,mBAHG;AAIHC,IAAAA,oBAJG;AAKHa,IAAAA,YALG;AAMHhB,IAAAA;AANG,GAAP;AAQH,CAtDD;;AAwDA,eAAeZ,OAAf","sourcesContent":["import { useState } from 'react';\nimport { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\n\nconst useForm = () => {\n\n    const [values, setValues] = useState({\n        location: {lat: null, lng: null},\n        distance: 10,\n        results: 25\n    });\n\n    const [address, setAddress] = useState(\"\");\n\n    const [loc, setLoc] = useState(\"\");\n    \n    function handleLocation(e){\n        setValues({...values, location: e});\n    }\n    \n    function handleAddressChange(e){\n        setAddress(e);\n    }\n\n    function handleLocationSelect(e){\n        geocodeByAddress(e)\n            .then(async results => {\n                const newAddress = results[0].formatted_address\n                      .replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\")\n                      .split(\" \")\n                      .slice(0, 2)\n                      .join(\" \");\n                await handleAddressChange(newAddress);\n                return getLatLng(results[0]);\n            })\n            .then(async latLng => {\n                const newValues = {\n                    ...values,\n                    location: latLng,\n                };\n                await setValues(newValues);\n            })\n            .catch(error => console.error('Error', error));\n    }\n\n    function handleSelect(e){ // dropdown\n        const { name, value } = e.target;\n        setValues({...values, [name]: parseInt(value)});\n    }\n\n    return {\n        values,\n        address,\n        handleAddressChange,\n        handleLocationSelect,\n        handleSelect,\n        handleLocation\n    };\n};\n\nexport default useForm;\n"]},"metadata":{},"sourceType":"module"}